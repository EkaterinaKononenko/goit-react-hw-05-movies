{"version":3,"file":"static/js/214.4ea5749c.chunk.js","mappings":"iPAOMA,EAAe,mCAAG,WAAMC,GAAN,gGAEGC,EAAAA,EAAAA,IAAA,UAPf,8BAOe,mBACJD,EADI,4BANf,mCAMe,qBALV,UAGO,cAEdE,EAFc,yBAKbA,EAASC,MALI,gCAOpBC,QAAQC,IAAR,MAPoB,yDAAH,sDAWrB,I,uCChBaC,EAAYC,EAAAA,GAAAA,GAAH,yHACP,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,UAAU,EAA1B,IAGT,SAAAF,GAAK,OAAIA,EAAMC,MAAME,OAAOC,OAAvB,IAIHC,EAAWN,EAAAA,GAAAA,IAAH,yCACV,SAAAC,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IAGHC,EAAYR,EAAAA,GAAAA,GAAH,+WAIJ,SAAAC,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IACJ,SAAAN,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IAEb,SAAAN,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IACM,SAAAN,GAAK,OAAIA,EAAMC,MAAME,OAAOK,UAAvB,IAGP,SAAAR,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IAMP,SAAAN,GAAK,OAAIA,EAAMC,MAAMQ,QAAQC,SAAxB,IACT,SAAAV,GAAK,OAAIA,EAAMC,MAAMU,QAAQC,OAAxB,IAINC,EAAad,EAAAA,GAAAA,GAAH,wD,4BC2BlB,EA7CQ,WACJ,IAAQP,GAAOsB,EAAAA,EAAAA,MAAPtB,GACR,GAAwBuB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAuBF,OApBGC,EAAAA,EAAAA,YAAU,WACR3B,EAAgBC,GACb2B,MAAK,SAAAzB,GAEJ,GADAuB,EAAQvB,EAASsB,MACY,IAAzBtB,EAASsB,KAAKI,OAChB,OAAOC,EAAAA,GAAAA,KAAW,yCAA0C,CAC1DC,SAAU,YACVC,UAAW,IACXtB,MAAO,WAGZ,IACAuB,OAAM,SAAAC,GACL7B,QAAQC,IAAI4B,EACb,GACJ,GAAE,CAACjC,IAELI,QAAQC,IAAImB,IAIZ,4BACE,SAAC,KAAD,KACA,SAACH,EAAD,UACGG,EAAKU,KAAI,YAAiC,IAA9BlC,EAA6B,EAA7BA,GAAImC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACfC,EAAaD,EAAY,UA3B3B,mCA2B2B,OACbA,GACdE,EACJ,OACE,UAACvB,EAAD,YACE,SAACF,EAAD,CAAU0B,IAAKF,EAAYG,IAAI,WAC/B,SAAClC,EAAD,UAAY6B,MAFEnC,EAKnB,QAIR,C","sources":["API/getMovieCredits.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/';\nconst KEY = 'd912e4e6ac5ac1e34c6318ab6e2c9716';\nconst LANGUAGE = 'en-US';\n\n\nconst getMovieCredits = async id => {\n  try {\n    const response = await axios.get(\n      `${URL}3/movie/${id}/credits?api_key=${KEY}&language=${LANGUAGE}`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default getMovieCredits;\n","import styled from \"styled-components\";\n\nexport const ActorName = styled.h2`\n  font-size: ${props => props.theme.fontSizes[5]}px;\n  font-family: 'Sevillana', cursive;\n  text-align: center;\n  color: ${props => props.theme.colors.primary};\n`;\n\n\nexport const ActorImg = styled.img`\n  width: ${props => props.theme.space[8]}px;\n`;\n\nexport const ActorCard = styled.li`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  margin-right: ${props => props.theme.space[5]}px;\n  margin-bottom: ${props => props.theme.space[4]}px;\n  object-fit: cover;\n  width: ${props => props.theme.space[8]}px;\n  background-color: ${props => props.theme.colors.background};\n\n  &: last-child {\n    margin-right: ${props => props.theme.space[0]}px;\n  }\n\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n    box-shadow: ${props => props.theme.shadows.boxShadow};\n    border: ${props => props.theme.borders.heading};\n  }\n`;\n\nexport const ActorsWrap = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;`\n\n","\nimport getMovieCredits from \"API/getMovieCredits\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport {\n  ActorName,\n  ActorImg,\n  ActorCard,\n  ActorsWrap,\n} from './Cast.styled';\nimport defaultPhoto from 'Image/default_photo.png';\nimport { ToastContainer, toast } from 'react-toastify';\n\n\n     \n\nconst Cast = () => {\n         const { id } = useParams();\n         const [cast, setCast] = useState([])\n  const pathname = 'https://image.tmdb.org/t/p/w500';\n         \n          useEffect(() => {\n            getMovieCredits(id)\n              .then(response => {\n                setCast(response.cast);\n                if (response.cast.length === 0) {\n                  return toast.info(\"Sorry, we don't have any informations.\", {\n                    position: 'top-right',\n                    autoClose: 3000,\n                    theme: 'colored',\n                  });\n                }\n              })\n              .catch(error => {\n                console.log(error);\n              });\n          }, [id]);\n\n         console.log(cast);\n  \n         \n       return (\n         <div>\n           <ToastContainer />\n           <ActorsWrap>\n             {cast.map(({ id, name, profile_path }) => {\n               const checkPhoto = profile_path\n                 ? `${pathname}${profile_path}`\n                 : defaultPhoto;\n               return (\n                 <ActorCard key={id}>\n                   <ActorImg src={checkPhoto} alt=\"actor\" />\n                   <ActorName>{name}</ActorName>\n                 </ActorCard>\n               );\n             })}\n           </ActorsWrap>\n         </div>\n       );\n     };\n\n     export default Cast;\n\n     Cast.propTypes = {\n       cast: PropTypes.arrayOf(\n         PropTypes.shape({\n           id: PropTypes.number.isRequired,\n           name: PropTypes.string.isRequired,\n           profile_path: PropTypes.string.isRequired,\n         })\n       ),\n     };\n\n "],"names":["getMovieCredits","id","axios","response","data","console","log","ActorName","styled","props","theme","fontSizes","colors","primary","ActorImg","space","ActorCard","background","shadows","boxShadow","borders","heading","ActorsWrap","useParams","useState","cast","setCast","useEffect","then","length","toast","position","autoClose","catch","error","map","name","profile_path","checkPhoto","defaultPhoto","src","alt"],"sourceRoot":""}