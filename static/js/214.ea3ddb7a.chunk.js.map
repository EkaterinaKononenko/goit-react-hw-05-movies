{"version":3,"file":"static/js/214.ea3ddb7a.chunk.js","mappings":"iPAOMA,EAAe,mCAAG,WAAMC,GAAN,gGAEGC,EAAAA,EAAAA,IAAA,UAPf,8BAOe,mBACJD,EADI,4BANf,mCAMe,qBALV,UAGO,cAEdE,EAFc,yBAKbA,EAASC,MALI,gCAOpBC,QAAQC,IAAR,MAPoB,yDAAH,sDAWrB,I,uCChBaC,EAAYC,EAAAA,GAAAA,GAAH,yHACP,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,UAAU,EAA1B,IAGT,SAAAF,GAAK,OAAIA,EAAMC,MAAME,OAAOC,OAAvB,IAIHC,EAAWN,EAAAA,GAAAA,IAAH,yCACV,SAAAC,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IAGHC,EAAYR,EAAAA,GAAAA,GAAH,oVAIJ,SAAAC,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IACJ,SAAAN,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IAEb,SAAAN,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IAEI,SAAAN,GAAK,OAAIA,EAAMC,MAAMK,MAAM,EAAtB,IAMV,SAAAN,GAAK,OAAIA,EAAMC,MAAMO,QAAQC,OAAxB,IACF,SAAAT,GAAK,OAAIA,EAAMC,MAAMS,QAAQC,SAAxB,IAIVC,EAAab,EAAAA,GAAAA,GAAH,wD,SCoBlB,EAvCQ,WACJ,IAAQP,GAAOqB,EAAAA,EAAAA,MAAPrB,GACR,GAAwBsB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAgBA,OAZCC,EAAAA,EAAAA,YAAU,WACR1B,EAAgBC,GACb0B,MAAK,SAAAxB,GACJsB,EAAQtB,EAASqB,KAClB,IACAI,OAAM,SAAAC,GACLxB,QAAQC,IAAIuB,EACb,GACJ,GAAE,CAAC5B,IAELI,QAAQC,IAAIkB,GAERA,GAGJ,0BACE,SAACH,EAAD,UACGG,EAAKM,KAAI,YAAiC,IAA9B7B,EAA6B,EAA7BA,GAAI8B,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACfC,EAAa,UArBf,mCAqBe,OACDD,GAElB,OACE,UAAChB,EAAD,YACE,SAACF,EAAD,CAAUoB,IAAKD,EAAYE,IAAI,WAC/B,SAAC5B,EAAD,UAAYwB,MAFE9B,EAKnB,SAfa,gEAmBrB,C,sBCpDS,SAASmC,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHK,MAAOH,OAAOC,OAAOH,MAG3B,C","sources":["API/getMovieCredits.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/';\nconst KEY = 'd912e4e6ac5ac1e34c6318ab6e2c9716';\nconst LANGUAGE = 'en-US';\n\n\nconst getMovieCredits = async id => {\n  try {\n    const response = await axios.get(\n      `${URL}3/movie/${id}/credits?api_key=${KEY}&language=${LANGUAGE}`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default getMovieCredits;\n","import styled from \"styled-components\";\n\nexport const ActorName = styled.h2`\n  font-size: ${props => props.theme.fontSizes[5]}px;\n  font-family: 'Sevillana', cursive;\n  text-align: center;\n  color: ${props => props.theme.colors.primary};\n`;\n\n\nexport const ActorImg = styled.img`\n  width: ${props => props.theme.space[8]}px;\n`;\n\nexport const ActorCard = styled.li`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  margin-right: ${props => props.theme.space[5]}px;\n  margin-bottom: ${props => props.theme.space[4]}px;\n  object-fit: cover;\n  width: ${props => props.theme.space[8]}px;\n  &: last-child {\n    margin-right: ${props => props.theme.space[0]}px;\n  }\n\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n    outline: ${props => props.theme.borders.heading};\n    box-shadow: ${props => props.theme.shadows.boxShadow};\n  }\n`;\n\nexport const ActorsWrap = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;`\n\n","\nimport getMovieCredits from \"API/getMovieCredits\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport {\n  ActorName,\n  ActorImg,\n  ActorCard,\n  ActorsWrap,\n} from './Cast.styled';\n\n     \n\nconst Cast = () => {\n         const { id } = useParams();\n         const [cast, setCast] = useState([])\n  const pathname = 'https://image.tmdb.org/t/p/w500';\n  const defaultPhoto = './Image/default_photo.png'\n         \n          useEffect(() => {\n            getMovieCredits(id)\n              .then(response => {\n                setCast(response.cast);\n              })\n              .catch(error => {\n                console.log(error);\n              });\n          }, [id]);\n\n         console.log(cast);\n\n         if(!cast){return (<p>Sorry, we don't have any informations</p>)}\n         \n       return (\n         <div>\n           <ActorsWrap>\n             {cast.map(({ id, name, profile_path }) => {\n               const checkPhoto = { profile_path }\n                 ? `${pathname}${profile_path}`\n                 : defaultPhoto;\n               return (\n                 <ActorCard key={id}>\n                   <ActorImg src={checkPhoto} alt=\"actor\" />\n                   <ActorName>{name}</ActorName>\n                 </ActorCard>\n               );\n             })}\n           </ActorsWrap>\n         </div>\n       );\n     };\n\n     export default Cast;\n\n     Cast.propTypes = {\n       cast: PropTypes.arrayOf(\n         PropTypes.shape({\n           id: PropTypes.number.isRequired,\n           name: PropTypes.string.isRequired,\n           profile_path: PropTypes.string.isRequired,\n         })\n       ),\n     };\n\n ","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["getMovieCredits","id","axios","response","data","console","log","ActorName","styled","props","theme","fontSizes","colors","primary","ActorImg","space","ActorCard","borders","heading","shadows","boxShadow","ActorsWrap","useParams","useState","cast","setCast","useEffect","then","catch","error","map","name","profile_path","checkPhoto","src","alt","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value"],"sourceRoot":""}